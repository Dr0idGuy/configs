#!/bin/zsh
## vim:ft=zsh

[[ -d "$HOME/bin" ]] && path=("$HOME/bin" $path )

(( ${+_ZSHRC_ZPROF} )) && zmodload zsh/zprof # && printf 'Start\n' && date --iso-8601=ns
# printf '%b\n' "\033[0;31mZSHRC: Hello! \033[0;0m"

### OS & Terminal Emulator Detection
unamestr=`uname`
unamearch=`uname -m`
if [[ "$unamestr" == 'Linux' ]]; then
  # Get the terminal emulator
  platform='Linux'
  if (( $PPID > 0 )); then
    TERM_PROGRAM=$(ps -fo cmd -hwcp $PPID )
    [[ ${TERM_PROGRAM[-1]} == '-' ]] && TERM_PROGRAM=${TERM_PROGRAM[0,-2]}
  else
    # we have no parent process
    # are we in docker?:
    if cat /proc/1/cgroup | grep docker -qa; then
      # yes
      TERM_PROGRAM="docker"
    fi
  fi
elif [[ "$unamestr" == 'Darwin' ]]; then
  # TERM_PROGRAM should already be set
  platform='Darwin'
  # Fix for some missing paths
  if [ -s /etc/paths ]; then
    local etcpaths
    declare -a etcpaths; etcpaths=( ${(f)"$(</etc/paths)"} )
    for pathitem in ${etcpaths} ; do
      if [[ ! ${path[(r)$pathitem]} == "$pathitem" ]]; then
        path+=($pathitem)
      fi
    done
  fi
else
  # Unsupported OS!
  printf '%b\n' "\033[0;31mZSHRC: Unsupported operating system!\
  Some things may break, or you might be missing functionality!\033[0m"
fi

# Set zrllink utility.
if (( ${+commands[rllink]} )); then
  function zrllink() {
    rllink -f $1
  }
elif (( ${+commands[readlink]} )); then
  function zrllink() {
    readlink -f $1
  }
  if [ "$platform" == "Darwin" ]; then
    function zrllink() {
      readlink $1
    }
  fi
elif (( ${+commands[perl]} )); then
  function zrllink() {
    perl -MCwd -le 'print Cwd::abs_path(shift)' $1
  }
else
  printf '%b\n' "\033[0;31mZSHRC: Couldn't find a valid symlink resolver! ZSHRC may not load correctly!\033[0m"
fi

### Configs install location detection
_ZSHRC_SCRIPTPATH="${(%):-%N}"
_ZSHRC_INSTALL_LOC=$(zrllink "$_ZSHRC_SCRIPTPATH")
_ZSHRC_INSTALL_DIR="${_ZSHRC_INSTALL_LOC%/*}"

### VTE Setup (nonlogin shell problem)
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
  # on Ubuntu it's in vte-2.91.sh sometimes for whatever reason?
  if [[ -s '/etc/profile.d/vte.sh' ]]; then
    Z_VTE_CONF_SETUP_FILE='/etc/profile.d/vte.sh'
  elif [[ -s '/etc/profile.d/vte-2.91.sh' ]]; then
    Z_VTE_CONF_SETUP_FILE='/etc/profile.d/vte-2.91.sh'
  fi

  if [[ -n "$Z_VTE_CONF_SETUP_FILE" ]]; then
    source $Z_VTE_CONF_SETUP_FILE
  fi
fi

### ZSH Theme selection
# ZSH Theme emulating the Fish shell's default prompt.
# Note this is the barebones version just as a fallback

_fishy_collapsed_wd() {
  echo $(pwd | perl -pe '
   BEGIN {
      binmode STDIN,  ":encoding(UTF-8)";
      binmode STDOUT, ":encoding(UTF-8)";
   }; s|^$ENV{HOME}|~|g; s|/([^/.])[^/]*(?=/)|/$1|g; s|/\.([^/])[^/]*(?=/)|/.$1|g
')
}

setopt promptsubst
local user_color='green'; [[ $UID == 0 ]] && user_color='red'
PROMPT='%n@%m %{$fg[$user_color]%}$(_fishy_collapsed_wd)%{$reset_color%}%(!.#.>) '
PROMPT2='%{$fg[red]%}\ %{$reset_color%}'

local return_status="%{$fg_bold[red]%}%(?..%?)%{$reset_color%}"

# Powerline available theme
Z_DEFAULT_POWERLINE_THEME="p9k"
case "$TERM_PROGRAM" in
  'python2'|\
  'terminator'|\
  'iTerm.app'|\
  'gnome-terminal'|\
  'tmux'|\
  'tilix'|\
  'sshd')
    ZSH_THEME="$Z_DEFAULT_POWERLINE_THEME"
    ;;
  'login')
    ZSH_THEME="fishy"
    ;;
  'zsh'|*)
    # Try to keep the same theme if it's already set.
    if [[ -z "$ZSH_THEME" ]]; then
      ZSH_THEME="fishy"
    fi
    ;;
esac
export ZSH_THEME

ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="false"

if [[ "${Z_LSBASE}" == "" ]]; then
  # used for a few plunks
  export Z_LSBASE='ls'
  export Z_LSARG_LONG='-l'
  export Z_LSARG_ALL='-a'
  if [[ "$platform" == "Linux" ]]; then
    export Z_LSARG_HUMAN='--color=tty -h'
    export Z_LSARG_FORCE_COLOR='--color=always'
  elif [[ "$platform" == "Darwin" ]]; then
    export Z_LSARG_HUMAN='-h'
    export Z_LSARG_FORCE_COLOR='-G'
  fi
fi

### Load extra completions
[[ -d "$_ZSHRC_INSTALL_DIR/fpath" ]] && fpath+=("$_ZSHRC_INSTALL_DIR/fpath")

### Plunks
# PLugin chUNKS
plunks=(
  lca # last command arguments
  lslbntl # ls long, but not too long
  presenter-mode # zsh for presenting to groups
  fancy-docker # for when you really just want a progress bar
  rtabfunc # rtab with fixes as a zsh function
)
typeset -U plunks

### Load framework

# Check that zplugin is installed
if [[ -s "$HOME/.zplugin/bin/zplugin.zsh" ]]; then

  source "$HOME/.zplugin/bin/zplugin.zsh"

  ### Dependencies

  # OMZ libraries
  local _ZSHRC_OMZ_SRCS
  _ZSHRC_OMZ_SRCS=(
    # lib/compfix.zsh
    lib/completion.zsh
    # lib/directories.zsh
    lib/functions.zsh
    lib/grep.zsh
    lib/history.zsh
    lib/key-bindings.zsh
    lib/misc.zsh
    lib/spectrum.zsh
    lib/termsupport.zsh
    lib/theme-and-appearance.zsh

    plugins/z/z.sh
    plugins/git/git.plugin.zsh

    themes/fishy.zsh-theme
  )

  zplugin ice from"gh" pick"lib/git.zsh" nocompletions blockf \
    multisrc"${_ZSHRC_OMZ_SRCS}"
  zplugin load robbyrussell/oh-my-zsh

  zplugin ice from"gh" blockf
  zplugin light zdharma/zui

  ### Theme

  # More power
  zplugin env-whitelist 'POWERLEVEL9K_*'
  # ZSH_THEME="$Z_INSTALL_DETECT_POWERLINE_THEME"
  POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context root_indicator dir_writable dir vcs)
  POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status command_execution_time background_jobs battery time)
  # Vim master race?
  #POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=( vi_mode )
  POWERLEVEL9K_VI_INSERT_MODE_STRING="I"
  POWERLEVEL9K_VI_COMMAND_MODE_STRING="CMD"
  # Specifics
  POWERLEVEL9K_BATTERY_LOW_THRESHOLD=30
  POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=1
  # User
  DEFAULT_USER="robo"
  POWERLEVEL9K_ALWAYS_SHOW_USER="true"
  POWERLEVEL9K_USER_DEFAULT_FOREGROUND="white"
  POWERLEVEL9K_USER_SUDO_FOREGROUND="gold1"
  POWERLEVEL9K_USER_ROOT_FOREGROUND="red"
  POWERLEVEL9K_USER_ICON=""
  POWERLEVEL9K_ROOT_ICON=""
  POWERLEVEL9K_SUDO_ICON=""
  # Host
  POWERLEVEL9K_HOST_LOCAL_FOREGROUND="grey58"
  POWERLEVEL9K_HOST_REMOTE_FOREGROUND="white"
  POWERLEVEL9K_HOST_ICON=""
  POWERLEVEL9K_SSH_ICON=""
  # Context
  POWERLEVEL9K_ALWAYS_SHOW_CONTEXT="true"
  POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND="grey58"
  POWERLEVEL9K_CONTEXT_SUDO_FOREGROUND="maroon"
  POWERLEVEL9K_CONTEXT_REMOTE_FOREGROUND="white"
  POWERLEVEL9K_CONTEXT_REMOTE_SUDO_FOREGROUND="gold1"
  POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND="red"
  # Single
  POWERLEVEL9K_STATUS_ERROR_BACKGROUND="red"
  POWERLEVEL9K_STATUS_ERROR_FOREGROUND="black"
  POWERLEVEL9K_BATTERY_ICON=""
  POWERLEVEL9K_BATTERY_HIDE_ABOVE_THRESHOLD="95"
  POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
  POWERLEVEL9K_SHORTEN_DELIMITER=""
  POWERLEVEL9K_SHORTEN_STRATEGY="truncate_from_right"
  POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND="black"
  POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND="242" # dimm gray
  POWERLEVEL9K_EXECUTION_TIME_ICON="⧖ "
  POWERLEVEL9K_VCS_REMOTE_BRANCH_ICON="⇗ "
  if (( ${+functions[rtab]} )); then
    POWERLEVEL9K_CUSTOM_RTAB_DIR="echo \$RTAB_PWD"
    POWERLEVEL9K_CUSTOM_RTAB_DIR_FOREGROUND="black"
    POWERLEVEL9K_CUSTOM_RTAB_DIR_BACKGROUND="blue"
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context root_indicator dir_writable custom_rtab_dir vcs)
    typeset -a chpwd_functions
    chpwd_functions+=(_rtab_pwd_update)
    function _rtab_pwd_update() {
      RTAB_PWD=$(rtab -l -t)
    }
  fi

  zplugin ice from"gh" if'[[ "$ZSH_THEME" == "p9k" ]]'
  zplugin light bhilburn/powerlevel9k

  # zpcompinit

  ### Normal Plugins
  # wait'0' plugins are after-prompt loaded.

  zplugin ice from"gh" blockf
  zplugin load zsh-users/zsh-completions

  zplugin ice wait'1' lucid nocompletions
  zplugin snippet OMZ::plugins/command-not-found/command-not-found.plugin.zsh

  # exa is only available for 64bit Linux & MacOS (by github release)
  if [[ $unamearch == "x86_64" ]]; then
    if [[ $unamestr == "Linux" ]]; then
      zplugin ice nocompletions from"gh-r" bpick"*-linux-$unamearch-*" \
        as"program" mv"exa-linux-* -> exa" pick"exa"
    elif [[ $unamestr == "Darwin" ]]; then
      zplugin ice nocompletions from"gh-r" bpick"*-macos-$unamearch-*" \
        as"program" mv"exa-macos-* -> exa" pick"exa"
    else
      zplugin ice nocompletions from"gh-r" bpick"*-$unamestr-$unamearch-*" \
        as"program" mv"exa-* -> exa" pick"exa"
      printf '%b\n' "\033[0;33mZSHRC: Warning: EXA auto-install probably not available.\033[0;0m"
    fi
    zplugin load ogham/exa
  fi

  zplugin ice from"gh" wait'0' lucid
  zplugin load robobenklein/k

  zplugin ice from"gh" wait'0' lucid
  zplugin load zdharma/history-search-multi-word

  zplugin ice from"gh" wait'1' lucid as"program" pick"bin/git-dsf"
  zplugin load zdharma/zsh-diff-so-fancy

  zplugin ice from"gh" wait'0' lucid atload'zpcompinit'
  zplugin light zdharma/fast-syntax-highlighting

else
  # Try to install it
  printf '%b\n' "\033[0;31mZSHRC: Couldn't find ~/.zplugin/bin/zplugin.zsh!\033[0m"
  if [ -s "$_ZSHRC_INSTALL_DIR/../install" ]; then
    printf '%b\n' "Try installing the configs repo at $_ZSHRC_INSTALL_DIR ?"
  fi
fi

### User configuration

# the background color for the terminal emulator
TERM_EMULATOR_BG_DEFAULT="#444444"

[[ -s "$HOME/.pythonz/etc/bashrc" ]] && source "$HOME/.pythonz/etc/bashrc"

# Go environment
[[ -d "$HOME/code/go" ]] && export GOPATH="$HOME/code/go"
[[ -d "$HOME/code/go/bin" ]] && path+=("$HOME/code/go/bin")

# NVM nodejs
if [[ -d "$HOME/.nvm" ]]; then
  export NVM_DIR="$HOME/.nvm"
  [[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh"
  [[ -s "$NVM_DIR/bash_completion" ]] && \. "$NVM_DIR/bash_completion"
fi

# Fix that guake doesn't set TERM properly
# it actually does have 256color...
if [[ "$TERM_PROGRAM" == "python2" ]] && [[ "$TERM" == "xterm" ]]; then
  TERM=xterm-256color
fi

# You may need to manually set your language environment
#export LANG=en_US.UTF-8

### Load Plunks
# little bits of plugins that I plop down
# PLugin chUNKS
for plunk in "${plunks[@]}"; do
  local plunkfile="$_ZSHRC_INSTALL_DIR/plunks/${plunk}.zsh"
  # [[ -s ${plunkfile} ]] || zcompile "${plunkfile}"
  source "${plunkfile}"
done

function plunkcompile {
  autoload -U zargs
  zargs -L1 -- $_ZSHRC_INSTALL_DIR/plunks/*.zsh -- builtin zcompile
}

# Remove chroma functions that misbehave
unset "FAST_HIGHLIGHT[chroma-vim]"

### Functions

# function which properly sets up vi mode things in order
function zsh_start_vi_mode() {
  export KEYTIMEOUT=1

  zplugin snippet OMZ::plugins/vi-mode/vi-mode.plugin.zsh

  #bindkey -v
  POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=( vi_mode )
  # in vi command mode:
  bindkey -M vicmd '?' history-incremental-search-backward
  bindkey -M vicmd '/' history-incremental-search-forward
  bindkey -M vicmd "k" up-line-or-beginning-search
  bindkey -M vicmd "j" down-line-or-beginning-search
  bindkey -M vicmd "^V" edit-command-line
  # Up/down as history partial search
  bindkey "^[OA" up-line-or-beginning-search
  bindkey "^[OB" down-line-or-beginning-search
}

### Personal shortcuts and aliases

alias zvi=zsh_start_vi_mode

if (( ${+commands[exa]} )) && command exa -v >/dev/null 2>&1; then
  export Z_LSBASE='exa'
  export Z_LSARG_HUMAN='--git'
  export Z_LSARG_LONG='--long'
  export Z_LSARG_ALL='-aa'
  export Z_LSARG_DEFAULTS='-g'
  export Z_LSARG_FORCE_COLOR='--color=always'
fi

# Dirs
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'
alias md='mkdir -p'

if [[ ${precmd_functions[(r)_z_precmd]} == "_z_precmd" ]]; then
  # move the _z_precmd to the prexec, so it only adds with commands executed,
  # not with prompts drawn
  precmd_functions=(${precmd_functions%_z_precmd})
  preexec_functions+=(_z_precmd)
fi

# Editor
if (( ${+commands[nvim]} )); then
  export EDITOR='nvim'
elif (( ${+commands[vim]} )); then
  export EDITOR='vim'
elif (( ${+commands[vi]} )); then
  export EDITOR='vi'
elif (( ${+commands[nano]} )); then
  export EDITOR='nano'
fi
alias v="$EDITOR"

# ls shortcuts

alias l="lslbntl" # from the plunk
alias ll="$Z_LSBASE $Z_LSARG_HUMAN $Z_LSARG_LONG $Z_LSARG_DEFAULTS"
alias la="$Z_LSBASE $Z_LSARG_HUMAN $Z_LSARG_LONG $Z_LSARG_ALL $Z_LSARG_DEFAULTS"

# cannot ((${+commands})) because it is an alias
if command -v d > /dev/null 2>&1; then
  unalias d >/dev/null 2>&1
fi
function d () {
  if [[ -n $1 ]]; then
    dirs "$@"
  else
    dirs -v | head -10
  fi
}
compdef _dirs d

function cprp () {
  rsync -r --info=progress2 --delay-updates --partial-dir=.rsync-partial "$@"
}
compdef _rsync cprp

alias gpg-message="gpg2 -a -es -r"
alias gpg-sign="gpg2 -a -s"
if (( ${+commands[atom]} )); then
  alias a="atom"
fi
if (( ${+commands[nautilus]} )); then
  alias n="nautilus"
fi
if (( ${+commands[git-lfs]} )); then
  alias glfs="git-lfs"
fi
if command -v bfg.jar > /dev/null 2>&1 && (( ${+commands[java]} )); then
  alias bfg="java -jar $(which bfg.jar )"
fi
alias m="make"
alias c="cat"
alias pu="pushd"
alias po="popd"

# CD Git root
alias cdg='cd $(git rev-parse --show-toplevel)'
# normalized git branch name ('/' -> '_')
function git_branch_norm() {
  local sr=$(git symbolic-ref HEAD )
  function {
    echo ${(j._.)@[3,-1]}
  } "${(@s:/:)sr}"
}

setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus

### PATH configuration

builtin dirs -c # on new zsh - no previous dirstack

# Keep this clean!
typeset -U path # unique items only in path array

# Add .local/bin to path with priority,
[[ -d "$HOME/.local/bin" ]] && path[1,0]="$HOME/.local/bin"

# Place home bin at front of path
[[ -d "$HOME/bin" ]] && path[1,0]="$HOME/bin"

export PATH

# EOF
ZSHRC_LOADED=true
