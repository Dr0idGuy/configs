
### OS & Terminal Emulator Detection
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
  # Get the terminal emulator
  platform='Linux'
  if (( $PPID > 0 )); then
    TERM_PROGRAM=$(ps -f -o comm -p $PPID | tail -1 | sed -r 's;:.*$;;gm' | sed -r 's/[-\/]*$//g')
  else
    # we have no parent process
    # are we in docker?:
    if cat /proc/1/cgroup | grep docker -qa; then
      # yes
      TERM_PROGRAM="docker"
    fi
  fi
elif [[ "$unamestr" == 'Darwin' ]]; then
  # TERM_PROGRAM should already be set
  platform='Darwin'
fi

### VTE Setup (nonlogin shell problem)
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
  # on Ubuntu it's in vte-2.91.sh sometimes for whatever reason?
  if [[ -s '/etc/profile.d/vte.sh' ]]; then
    Z_VTE_CONF_SETUP_FILE='/etc/profile.d/vte.sh'
  elif [[ -s '/etc/profile.d/vte-2.91.sh' ]]; then
    Z_VTE_CONF_SETUP_FILE='/etc/profile.d/vte-2.91.sh'
  fi

  if [[ -n "$Z_VTE_CONF_SETUP_FILE" ]]; then
    source $Z_VTE_CONF_SETUP_FILE
  fi
fi

### ZSH Theme selection
# Powerline available theme
Z_DEFAULT_POWERLINE_THEME="agnoster"
# Powerline theme only activated if it's installed
Z_INSTALL_DETECT_POWERLINE_THEME="bhilburn/powerlevel9k"
case "$TERM_PROGRAM" in
  'python2'|\
  'terminator'|\
  'iTerm.app'|\
  'gnome-terminal'|\
  'tmux'|\
  'tilix'|\
  'sshd')
    ZSH_THEME="$Z_DEFAULT_POWERLINE_THEME"
    ;;
  'login')
    ZSH_THEME="fishy"
    ;;
  'zsh'|*)
    # Try to keep the same theme if it's already set.
    if [[ -z "$ZSH_THEME" ]]; then
      ZSH_THEME="fishy"
    fi
    ;;
esac
export ZSH_THEME

ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="true"

### PLUGINS
antigenplugins=(
#  vi-mode
  git
  command-not-found
  cp
  robobenklein/k
  z
#  zsh-users/zsh-syntax-highlighting
  colored-man-pages
  peterhurford/git-it-on.zsh
  Tarrasch/zsh-bd
  zdharma/fast-syntax-highlighting
)
typeset -U antigenplugins

### User configuration

# the background color for the terminal emulator
TERM_EMULATOR_BG_DEFAULT="#444444"

# Tmux plugin:
ZSH_TMUX_FIXTERM_WITHOUT_256COLOR="screen-256color"
ZSH_TMUX_AUTOSTART="false"
ZSH_TMUX_AUTOCONNECT="false"

[[ -s $HOME/.pythonz/etc/bashrc ]] && source $HOME/.pythonz/etc/bashrc

# Go environment
[ -d $HOME/code/go ] && export GOPATH=$HOME/code/go
[ -d $HOME/code/go/bin ] && path+=($HOME/code/go/bin)

# NVM nodejs
if [ -d $HOME/.nvm ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# added by travis gem
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh

# Fix that guake doesn't set TERM properly
# it actually does have 256color...
if [[ $TERM_PROGRAM == "python2" ]] && [[ $TERM == "xterm" ]]; then
  TERM=xterm-256color
fi

### Load framework

# Check that antigen is installed
if [[ -s $HOME/.antigen/antigen.zsh ]]; then
  # If powerlevel9k is installed, use it
  if [[ -d ~/.antigen/bundles/$Z_INSTALL_DETECT_POWERLINE_THEME ]] && \
    [[ $ZSH_THEME == $Z_DEFAULT_POWERLINE_THEME ]] || \
    [[ $ZSH_THEME == $Z_INSTALL_DETECT_POWERLINE_THEME ]]; then
    # More power
    ZSH_THEME="$Z_INSTALL_DETECT_POWERLINE_THEME"
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir_writable dir vcs)
    POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status command_execution_time root_indicator background_jobs battery time)
    # Vim master race?
    #POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=( vi_mode )
    POWERLEVEL9K_VI_INSERT_MODE_STRING="I"
    POWERLEVEL9K_VI_COMMAND_MODE_STRING="CMD"
    # Specifics
    POWERLEVEL9K_BATTERY_LOW_THRESHOLD=30
    POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=1
    POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND="white"
    POWERLEVEL9K_BATTERY_ICON=""
    POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
    POWERLEVEL9K_SHORTEN_DELIMITER=""
    POWERLEVEL9K_SHORTEN_STRATEGY="truncate_from_right"
    POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND="black"
    POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND="242" # dimm gray
    POWERLEVEL9K_EXECUTION_TIME_ICON="⧖ "
    POWERLEVEL9K_VCS_REMOTE_BRANCH_ICON="⇗ "
    if command -v rtab > /dev/null 2>&1; then
      POWERLEVEL9K_CUSTOM_RTAB_DIR="echo \$(rtab -t -l)"
      POWERLEVEL9K_CUSTOM_RTAB_DIR_FOREGROUND="black"
      POWERLEVEL9K_CUSTOM_RTAB_DIR_BACKGROUND="blue"
      POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir_writable custom_rtab_dir vcs)
    fi
  fi
  ANTIGEN_CACHE=$HOME/.antigen/init-cache-${TERM_PROGRAM}-$( echo $ZSH_THEME | tr -cd '[[:alnum:]]').zsh
  source $HOME/.antigen/antigen.zsh
  antigen use oh-my-zsh
  for plugin in $antigenplugins; do
    antigen bundle "$plugin"
  done
  antigen theme $ZSH_THEME
  antigen apply
  # Remove paths that start with $HOME/.antigen/
  if [[ "$platform" == 'Linux' ]]; then
    antigen_fullpath=$(readlink -f $HOME/.antigen/ )
  elif [[ "$platform" == 'Darwin' ]]; then
    antigen_fullpath=$(readlink $HOME/.antigen/ )
  fi
  path=( ${path%${antigen_fullpath}/*} )
else
  # Where did antigen go?
  echo -e "\033[0;31mZSHRC: Couldn't find ~/.antigen/antigen.zsh!\033[0m"
  # Do we have OMZ?
  if [[ -s $HOME/.oh-my-zsh/oh-my-zsh.sh ]]; then
    export ZSH=$HOME/.oh-my-zsh
    source $ZSH/oh-my-zsh.sh
  fi
fi

# You may need to manually set your language environment
#export LANG=en_US.UTF-8

### Functions

# ls long, but not too long
# complicated fix to not show too many dotfiles for just 'l'
# does not show hidden files if the terminal height can't show everything
function lslbntl() {
  local Z_TMP_LS_DOTSHOWN_SIZE=$($Z_LSBASE $Z_LSARGEXTRA -lah $@ 2>/dev/null | wc -l)
  if [[ $Z_TMP_LS_DOTSHOWN_SIZE -gt $(tput lines) ]]; then # then don't show hidden files
    echo "Not showing hidden files"
    Z_LSARGS="-lh"
  else
    Z_LSARGS="-lah"
  fi
  $Z_LSBASE $Z_LSARGEXTRA $Z_LSARGS $@
}

# function which properly sets up vi mode things in order
function zsh_start_vi_mode() {
  export KEYTIMEOUT=1
  antigen bundle vi-mode
  #bindkey -v
  POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=( vi_mode )
  # in vi command mode:
  bindkey -M vicmd '?' history-incremental-search-backward
  bindkey -M vicmd '/' history-incremental-search-forward
  bindkey -M vicmd "k" up-line-or-beginning-search
  bindkey -M vicmd "j" down-line-or-beginning-search
  bindkey -M vicmd "^V" edit-command-line
  # Up/down as history partial search
  bindkey "^[OA" up-line-or-beginning-search
  bindkey "^[OB" down-line-or-beginning-search

}

# function which sets up the terminal for use during demos and explainers
function zsh_presenter_mode_start() {
  # function that prints the expanded command right-aligned before running it
  # (e.x. shows aliases in expanded form so peeps aren't lost)
  function preshow_expanded_command() {
    printf "%$(($(tput cols)))b\n" "expanded: \033[0;1m$3\033[0;0m"
  }
  Z_PRESENTER_PREEXEC_FUNCTIONS_BACKUP=$preexec_functions
  echo "Backed up preexec array: $Z_PRESENTER_PREEXEC_FUNCTIONS_BACKUP"
  preexec_functions+=(preshow_expanded_command)
  Z_PRESENTER_MODE_ENABLED=1
  # set terminal background to black to improve contrast:
  echo -e "\033]11;#000000\a"
  # switch toggle command
  alias zsh-presenter-toggle=zsh_presenter_mode_stop
  sleep 1
  clear
  echo ""
  title="PRESENTATION MODE"
  printf "%*s\n" $(((${#title}+$(tput cols))/2)) "$title"
  echo ""
}
function zsh_presenter_mode_stop() {
  echo -e "\033]11;${TERM_EMULATOR_BG_DEFAULT}\a"
  # Check that we're not gonna accidentally set the preexec array blank
  if (( $+Z_PRESENTER_MODE_ENABLED )) && (( $+Z_PRESENTER_PREEXEC_FUNCTIONS_BACKUP )); then
    preexec_functions=($Z_PRESENTER_PREEXEC_FUNCTIONS_BACKUP)
    echo "restored preexec array: $preexec_functions"
    unset Z_PRESENTER_MODE_ENABLED
    unset Z_PRESENTER_PREEXEC_FUNCTIONS_BACKUP
    alias zsh-presenter-toggle=zsh_presenter_mode_start
  else
    >&2 echo "Presenter mode not enabled."
    return 1
  fi
}

### Personal shortcuts and aliases

alias zvi=zsh_start_vi_mode

alias zsh-presenter-toggle=zsh_presenter_mode_start

# Editor
if command -v nvim > /dev/null 2>&1; then
  export EDITOR='nvim'
elif command -v vim > /dev/null 2>&1; then
  export EDITOR='vim'
elif command -v vi > /dev/null 2>&1; then
  export EDITOR='vi'
elif command -v nano > /dev/null 2>&1; then
  export EDITOR='nano'
fi
alias v="$EDITOR"

# ls shortcuts
if command -v exa > /dev/null 2>&1; then
  export Z_LSBASE='exa'
  export Z_LSARGEXTRA='--git'
else
  export Z_LSBASE='ls'
  if [[ "$platform" == "Linux" ]]; then
    export Z_LSARGEXTRA='--color=tty'
  elif [[ "$platform" == "Darwin" ]]; then
    export Z_LSARGEXTRA='-G'
  fi
fi

alias l="lslbntl"
alias ll="$Z_LSBASE $Z_LSARGEXTRA -lh"
alias la="$Z_LSBASE $Z_LSARGEXTRA -lah"

alias gpg-message="gpg2 -a -es -r"
alias gpg-sign="gpg2 -a -s"
if command -v atom > /dev/null 2>&1; then
  alias a="atom"
fi
if command -v nautilus > /dev/null 2>&1; then
  alias n="nautilus"
fi
alias m="make"

# normalized git branch name
alias git_branch_norm="git symbolic-ref HEAD|cut -d'/' -f3-|sed -e 's;/;_;'"

### PATH configuration

# Keep this clean!
typeset -U path # unique items only in path array

# Add .local/bin to path with priority,
[ -d $HOME/.local/bin ] && path[1,0]=$HOME/.local/bin

# Place home bin at front of path
[ -d $HOME/bin ] && path[1,0]=$HOME/bin

export PATH

# EOF
ZSHRC_LOADED=1

