#!/bin/zsh
## vim:ft=zsh

[ -d "$HOME/bin" ] && path=("$HOME/bin" $path )

### OS & Terminal Emulator Detection
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
  # Get the terminal emulator
  platform='Linux'
  if (( $PPID > 0 )); then
    TERM_PROGRAM=$(ps -f -o comm -p $PPID | tail -1 | sed -r 's;:.*$;;gm' | sed -r 's/[-\/]*$//g')
  else
    # we have no parent process
    # are we in docker?:
    if cat /proc/1/cgroup | grep docker -qa; then
      # yes
      TERM_PROGRAM="docker"
    fi
  fi
elif [[ "$unamestr" == 'Darwin' ]]; then
  # TERM_PROGRAM should already be set
  platform='Darwin'
  if [ -s /etc/paths ]; then
    for pathitem in $(/bin/cat "/etc/paths" ); do
      if [[ ! ${path[(r)$pathitem]} == "$pathitem" ]]; then
        path+=($pathitem)
      fi
    done
  fi
else
  # Unsupported OS!
  echo -e "\033[0;31mZSHRC: Unsupported operating system! Some things may break, or you might be missing functionality!\033[0m"
fi

# Set zrllink utility.
if command -v rllink >/dev/null 2>&1; then
  function zrllink() {
    rllink -f $1
  }
elif command -v readlink >/dev/null 2>&1; then
  function zrllink() {
    readlink -f $1
  }
  if [ "$platform" == "Darwin" ]; then
    function zrllink() {
      readlink $1
    }
  fi
elif command -v perl >/dev/null 2>&1; then
  function zrllink() {
    perl -MCwd -le 'print Cwd::abs_path(shift)' $1
  }
else
  echo -e "\033[0;31mZSHRC: Couldn't find a valid readlink! ZSHRC may not load correctly!\033[0m"
fi

### Configs install location detection
_ZSHRC_SCRIPTPATH="${(%):-%N}"
_ZSHRC_INSTALL_LOC=$(zrllink "$_ZSHRC_SCRIPTPATH")
_ZSHRC_INSTALL_DIR="${_ZSHRC_INSTALL_LOC%/*}"

### VTE Setup (nonlogin shell problem)
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
  # on Ubuntu it's in vte-2.91.sh sometimes for whatever reason?
  if [[ -s '/etc/profile.d/vte.sh' ]]; then
    Z_VTE_CONF_SETUP_FILE='/etc/profile.d/vte.sh'
  elif [[ -s '/etc/profile.d/vte-2.91.sh' ]]; then
    Z_VTE_CONF_SETUP_FILE='/etc/profile.d/vte-2.91.sh'
  fi

  if [[ -n "$Z_VTE_CONF_SETUP_FILE" ]]; then
    source $Z_VTE_CONF_SETUP_FILE
  fi
fi

### ZSH Theme selection
# ZSH Theme emulating the Fish shell's default prompt.

_fishy_collapsed_wd() {
  echo $(pwd | perl -pe '
   BEGIN {
      binmode STDIN,  ":encoding(UTF-8)";
      binmode STDOUT, ":encoding(UTF-8)";
   }; s|^$ENV{HOME}|~|g; s|/([^/.])[^/]*(?=/)|/$1|g; s|/\.([^/])[^/]*(?=/)|/.$1|g
')
}

local user_color='green'; [ $UID -eq 0 ] && user_color='red'
PROMPT='%n@%m %{$fg[$user_color]%}$(_fishy_collapsed_wd)%{$reset_color%}%(!.#.>) '
PROMPT2='%{$fg[red]%}\ %{$reset_color%}'

local return_status="%{$fg_bold[red]%}%(?..%?)%{$reset_color%}"
RPROMPT='${return_status}$(git_prompt_info)$(git_prompt_status)%{$reset_color%}'

# Powerline available theme
Z_DEFAULT_POWERLINE_THEME="p9k"
case "$TERM_PROGRAM" in
  'python2'|\
  'terminator'|\
  'iTerm.app'|\
  'gnome-terminal'|\
  'tmux'|\
  'tilix'|\
  'sshd')
    ZSH_THEME="$Z_DEFAULT_POWERLINE_THEME"
    ;;
  'login')
    ZSH_THEME="fishy"
    ;;
  'zsh'|*)
    # Try to keep the same theme if it's already set.
    if [[ -z "$ZSH_THEME" ]]; then
      ZSH_THEME="fishy"
    fi
    ;;
esac
export ZSH_THEME

ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="true"

if [[ "${Z_LSBASE}" == "" ]]; then
  # used for a few plunks
  export Z_LSBASE='ls'
  if [[ "$platform" == "Linux" ]]; then
    export Z_LSARGEXTRA='--color=tty'
    export Z_LSARG_FORCE_COLOR='--color=always'
  elif [[ "$platform" == "Darwin" ]]; then
    export Z_LSARG_FORCE_COLOR='-G'
  fi
fi

### Load extra completions
[ -d "$_ZSHRC_INSTALL_DIR/fpath" ] && fpath+=("$_ZSHRC_INSTALL_DIR/fpath")

### PLUGINS
antigenplugins=(
  # vi-mode
  # colored-man-pages
  # peterhurford/git-it-on.zsh
  git
  # git-flow
  command-not-found
  robobenklein/k
  z
  Tarrasch/zsh-bd
  zsh-users/zsh-completions
  zdharma/history-search-multi-word
  zdharma/fast-syntax-highlighting
  # zsh-users/zsh-syntax-highlighting
)
typeset -U antigenplugins
plunks=( # PLugin chUNKS
  lca # last command arguments
  lslbntl # ls long, but not too long
  presenter-mode # zsh for presenting to groups
  git-lfs-completion
)
typeset -U plunks

### Load framework

# Check that zplugin is installed
if [[ -s "$HOME/.zplugin/bin/zplugin.zsh" ]]; then

  source "$HOME/.zplugin/bin/zplugin.zsh"

  ### Dependencies

  # OMZ libraries
  local _ZSHRC_OMZ_LIBS=(
    compfix.zsh
    completion.zsh
    directories.zsh
    functions.zsh
    grep.zsh
    history.zsh
    key-bindings.zsh
    misc.zsh
    spectrum.zsh
    termsupport.zsh
    theme-and-appearance.zsh
  )

  zplugin ice from"gh" pick"lib/git.zsh" atload'local f; for f in ${_ZSHRC_OMZ_LIBS}; do source lib/$f; done'
  zplugin light robbyrussell/oh-my-zsh
  zplugin cdclear -q

  zplugin light zdharma/zui

  ### Theme

  zplugin ice from"gh" if'[[ "$ZSH_THEME" == "p9k" ]]'
  zplugin load bhilburn/powerlevel9k

  # More power
  # ZSH_THEME="$Z_INSTALL_DETECT_POWERLINE_THEME"
  POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context root_indicator dir_writable dir vcs)
  POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status command_execution_time background_jobs battery time)
  # Vim master race?
  #POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=( vi_mode )
  POWERLEVEL9K_VI_INSERT_MODE_STRING="I"
  POWERLEVEL9K_VI_COMMAND_MODE_STRING="CMD"
  # Specifics
  POWERLEVEL9K_BATTERY_LOW_THRESHOLD=30
  POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=1
  POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND="white"
  POWERLEVEL9K_BATTERY_ICON=""
  POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
  POWERLEVEL9K_SHORTEN_DELIMITER=""
  POWERLEVEL9K_SHORTEN_STRATEGY="truncate_from_right"
  POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND="black"
  POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND="242" # dimm gray
  POWERLEVEL9K_EXECUTION_TIME_ICON="⧖ "
  POWERLEVEL9K_VCS_REMOTE_BRANCH_ICON="⇗ "
  if command -v rtab > /dev/null 2>&1; then
    POWERLEVEL9K_CUSTOM_RTAB_DIR="echo \$(rtab -t -l)"
    POWERLEVEL9K_CUSTOM_RTAB_DIR_FOREGROUND="black"
    POWERLEVEL9K_CUSTOM_RTAB_DIR_BACKGROUND="blue"
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context root_indicator dir_writable custom_rtab_dir vcs)
  fi

  # gotta have something...
  zplugin snippet OMZ::themes/fishy.zsh-theme

  ### Normal Plugins

  zplugin ice wait'0' lucid
  zplugin snippet OMZ::plugins/command-not-found/command-not-found.plugin.zsh

  zplugin snippet OMZ::plugins/z/z.sh

  zplugin snippet OMZ::plugins/git/git.plugin.zsh

  zplugin ice from"gh"
  zplugin light zsh-users/zsh-completions

  zplugin ice from"gh" wait'0' lucid
  zplugin load robobenklein/k

  zplugin ice from"gh"
  zplugin light zdharma/history-search-multi-word

  zplugin ice from"gh" wait'0' lucid
  zplugin light zdharma/fast-syntax-highlighting

  zplugin ice from"gh" as"program" pick"bin/git-dsf"
  zplugin light zdharma/zsh-diff-so-fancy

  # zplugin ice from"gh" wait'0' lucid
  # zplugin light zdharma/zplugin-crasis

  # Remove paths that start with $HOME/.antigen/
  antigen_fullpath=$(zrllink "$HOME/.antigen/" )
  path=( ${path%"${antigen_fullpath}/*"} )
else
  # Try to install it
  echo -e "\033[0;31mZSHRC: Couldn't find ~/.zplugin/bin/zplugin.zsh!\033[0m"
  if [ -s "$_ZSHRC_INSTALL_DIR" ]
fi

### User configuration

# the background color for the terminal emulator
TERM_EMULATOR_BG_DEFAULT="#444444"

[[ -s "$HOME/.pythonz/etc/bashrc" ]] && source "$HOME/.pythonz/etc/bashrc"

# Go environment
[ -d "$HOME/code/go" ] && export GOPATH="$HOME/code/go"
[ -d "$HOME/code/go/bin" ] && path+=("$HOME/code/go/bin")

# NVM nodejs
if [ -d "$HOME/.nvm" ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# Fix that guake doesn't set TERM properly
# it actually does have 256color...
if [[ "$TERM_PROGRAM" == "python2" ]] && [[ "$TERM" == "xterm" ]]; then
  TERM=xterm-256color
fi

# You may need to manually set your language environment
#export LANG=en_US.UTF-8

### Load Plunks
# little bits of plugins that I plop down
# PLugin chUNKS
for plunk in "${plunks[@]}"; do
  source "$_ZSHRC_INSTALL_DIR/plunks/${plunk}.zsh"
done

# compinit

# Whitelist chroma functions because some misbehave
FAST_HIGHLIGHT=(
  chroma-example chroma/-example.ch
  chroma-docker chroma/-docker.ch
  chroma-make chroma/-make.ch
  chroma-perl chroma/-perl.ch
  chroma-printf chroma/-printf.ch

  chroma-git chroma/-git.ch

  chroma-grep chroma/-grep.ch
  chroma-egrep chroma/-grep.ch
  chroma-fgrep chroma/-grep.ch

  chroma-awk chroma/-awk.ch
  chroma-gawk chroma/-awk.ch
  chroma-mawk chroma/-awk.ch
)

### Functions

# function which properly sets up vi mode things in order
function zsh_start_vi_mode() {
  export KEYTIMEOUT=1
  antigen bundle vi-mode
  #bindkey -v
  POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS+=( vi_mode )
  # in vi command mode:
  bindkey -M vicmd '?' history-incremental-search-backward
  bindkey -M vicmd '/' history-incremental-search-forward
  bindkey -M vicmd "k" up-line-or-beginning-search
  bindkey -M vicmd "j" down-line-or-beginning-search
  bindkey -M vicmd "^V" edit-command-line
  # Up/down as history partial search
  bindkey "^[OA" up-line-or-beginning-search
  bindkey "^[OB" down-line-or-beginning-search
}

### Personal shortcuts and aliases

alias zvi=zsh_start_vi_mode

if command -v exa > /dev/null 2>&1; then
  export Z_LSBASE='exa'
  export Z_LSARGEXTRA='--git'
  export Z_LSARG_FORCE_COLOR='--color=always'
fi

# Editor
if command -v nvim > /dev/null 2>&1; then
  export EDITOR='nvim'
elif command -v vim > /dev/null 2>&1; then
  export EDITOR='vim'
elif command -v vi > /dev/null 2>&1; then
  export EDITOR='vi'
elif command -v nano > /dev/null 2>&1; then
  export EDITOR='nano'
fi
alias v="$EDITOR"

# ls shortcuts

alias l="lslbntl" # from the plunk
alias ll="$Z_LSBASE $Z_LSARGEXTRA -lh"
alias la="$Z_LSBASE $Z_LSARGEXTRA -lah"

if command -v d > /dev/null 2>&1; then
  unalias d >/dev/null 2>&1
fi
function d () {
  if [[ -n $1 ]]; then
    dirs "$@"
  else
    dirs -v | head -10
  fi
}
compdef _dirs d

function cprp () {
  rsync -r --info=progress2 --delay-updates --partial-dir=.rsync-partial "$@"
}
compdef _rsync cprp

alias gpg-message="gpg2 -a -es -r"
alias gpg-sign="gpg2 -a -s"
if command -v atom > /dev/null 2>&1; then
  alias a="atom"
fi
if command -v nautilus > /dev/null 2>&1; then
  alias n="nautilus"
fi
if command -v git-lfs > /dev/null 2>&1; then
  alias glfs="git-lfs"
fi
if command -v bfg.jar > /dev/null 2>&1 && command -v java > /dev/null 2>&1; then
  alias bfg="java -jar $(which bfg.jar )"
fi
alias m="make"
alias c="cat"
alias pu="pushd"
alias po="popd"

# CD Git root
alias cdg='cd $(git rev-parse --show-toplevel)'
# normalized git branch name ('/' -> '_')
function git_branch_norm() {
  git symbolic-ref HEAD|cut -d'/' -f3-|sed -e 's;/;_;'
}

### PATH configuration

# Keep this clean!
typeset -U path # unique items only in path array

# Add .local/bin to path with priority,
[ -d "$HOME/.local/bin" ] && path[1,0]="$HOME/.local/bin"

# Place home bin at front of path
[ -d "$HOME/bin" ] && path[1,0]="$HOME/bin"

export PATH

# EOF
ZSHRC_LOADED=1
